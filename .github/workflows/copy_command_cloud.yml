name: Build and Test copy_command on (Debian|Alpine)x(x86|ARM)

on:
    push:
      paths:
        - 'copy_command/**'
        - '!copy_command/**/*.md'
    pull_request:
      paths:
        - 'copy_command/**'
        - '!copy_command/**/*.md'
    
jobs:
  build-and-test:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: ['debian:11', 'alpine:3.18']
        arch: [amd64, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      with:
        platforms: all

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and Test on ${{ matrix.os }} (${{ matrix.arch }})
      run: |
        docker run --rm \
          --platform linux/${{ matrix.arch }} \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace/copy_command \
          ${{ matrix.os }} \
          /bin/sh -c "
          ( ( which apk && apk add --no-cache cmake gcc g++ make ) || ( which apt-get && apt-get update && apt-get install -y cmake gcc g++ make ) ) &&
          cmake -S . -B build &&
          cmake --build build &&
          ctest --test-dir build --output-on-failure
          "

    - name: Make test results filename
      run: |
        OS_VERSION="${{ matrix.os }}"
        OS_VERSION="${OS_VERSION//:/_}"
        OS_VERSION="${OS_VERSION//./-}"
        echo "OS_VERSION=${OS_VERSION}" >> $GITHUB_ENV

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: "test-results-${{ env.OS_VERSION }}-${{ matrix.arch }}"
        path: copy_command/build/Testing/Temporary/LastTest.log
